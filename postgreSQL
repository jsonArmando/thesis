*INSTALACIÓN Y SOLUCIÓN DE PROBLEMAS | POSTGRESQL #1

*COMO CREAR UNA BASE DE DATOS | POSTGRESQL #2
-CREATE DATABASE TEST
-CREATE DATABASE developer
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;
	
*ELIMINAR BASE DE DATOS | POSTGRESQL #3
-DROP DATABASE IF EXISTS "example"

*COMO CREAR UNA TABLBA | POSTGRESQL #4
-CREATE TABLE PERSONA(
IDPERSONA INTEGER NOT NULL,
	NOMBRE VARCHAR(30),
	CEDULA VARCHAR(10)
);
SELECT * FROM PERSONA;

*COMO INSERTAR DATOS EN UNA TABLA - INSERT | POSTGRESQL #5
-INSERT INTO PERSONA VALUES('1','JOSE','1077851273');
-INSERT INTO PERSONA (idpersona,nombre) VALUES('1','ARMANDO');

*ACTUALIZAR REGISTROS -UPDATE | POSTGRESQL #6
-UPDATE PERSONA SET idpersona='2' where cedula is null;
-update persona set cedula='1075222431' where cedula is null;
-UPDATE PERSONA SET idpersona='1', nombre='DANIEL' where cedula='1077851273';

*TIPOS DE DATOS | POSTGRESQL #7
--BOOLEAN = TRUE OR FALSE
--CHARACTER(n) = CADENA DE CARACTERES DE TAMAÑO FIJO
--DATE = FECHA SIN HORA
--FLOAT = FLOTANTE NÚMERO
--INTEGER OR INT = NÚMERO ENTERO
--DECIMAL = NÚMEROS EXACTO
--TIME = TIEMPO EN HORAS, MINUTOS, SEGUNDOS
--VARCHAR(n) = CADENA DE CARACTERES DE TAMAÑO VARIABLE

*CONSULTAS DE DATOS -SELECT | POSTGRESQL #8
-SELECT * FROM PERSONA;
-SELECT NOMBRE,CEDULA FROM PERSONA;
-SELECT (NOMBRE,CEDULA) DATOS FROM PERSONA;
-SELECT NOMBRE AS NOMBRE, CEDULA AS IDENTIFICACION FROM PERSONA;
-SELECT NOMBRE FROM PERSONA WHERE idpersona='1';

*WHERE Y OPERADORES DE COMPARACIÓN | POSTGRESQL #9
-SELECT * FROM PERSONA WHERE NOMBRE = 'DANIEL';
-SELECT * FROM PERSONA WHERE NOMBRE != 'DANIEL';
-SELECT * FROM PERSONA WHERE IDPERSONA <= '2';
-SELECT * FROM PERSONA WHERE IDPERSONA = '1' and nombre='JOSE'; 

* COMO ELIMINAR DATOS DE UNA TABLA -DELETE | POSTGRESQL #10
-DELETE FROM PERSONA WHERE NOMBRE='DANIEL';

*COMENTAR UNA O MÁS LÍNEAS EN SQL | POSTGRESQL #11
--SELECT * FROM PERSONA
/*
CREATE TABLE TEST(
IDTEST INTEGER NO NULL,
	NOMBRE VARCHAR(20),
	TELEFONO VARCHAR(10)
)*/

*MODIFICAR UNA TABLA -ALTER | POSTGRESQL #12
-ALTER TABLE PERSONA ADD COLUMN APELLIDOS VARCHAR(20);
-ALTER TABLE PERSONA RENAME COLUMN APELLIDOS TO TEST;
-ALTER TABLE PERSONA DROP COLUMN TEST;

*MODIFICAR UNA COLUMNA -ALTER COLUMN | POSTGRESQL #13
-ALTER TABLE PERSONA DROP COLUMN TEST;
-ALTER TABLE PERSONA ALTER COLUMN APELLIDOS DROP NOT NULL;
-ALTER TABLE PERSONA ALTER COLUMN APELLIDOS TYPE VARCHAR(50);

*CLAVE PRIMARIA -PRIMARY KEY | POSTGRESQL #14
CREATE TABLE TEST(
IDPERSONA INTEGER NOT NULL PRIMARY KEY,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(10)
);
CREATE TABLE DATOS(
IDPERSONA INTEGER NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(10), 
	PRIMARY KEY(IDPERSONA)
);
-ALTER TABLE PERSONA ADD PRIMARY KEY (IDPERSONA);
-insert INTO PERSONA VALUES ('1','ARMANDO','8811160','SON');

*AUTO INCREMENTAR -SERIAL | POSTGRESQL #15
-CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL  PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(20)
);
SELECT * FROM EXAMPLE;
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('ARMANDO','3105692768');

*DROP Y TRUNCATE | POSTGRESQL #16 
-DROP BORRAR TABLAS TRUNCATE ERASE TABLE 
-SELECT * FROM EXAMPLE;
DELETE FROM EXAMPLE;
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('ARMANDO','3105692768');
DROP TABLE EXAMPLE;
--TRUNCATE --ELIMINA LA TABLA Y VUELVE Y LA CREA
TRUNCATE TABLE EXAMPLE RESTART IDENTITY; --INICIAR LA TABLA DESDE IDEXAMPLE
CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL  PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(20)
);

*VALORES POR DEFAULT EN UNA TABLA | POSTGRESQL #17
---AGREGAR VALORES POR DEFAULT EN UN CAMPO

SELECT * FROM EXAMPLE;
DROP TABLE EXAMPLE;
CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	TELEFONO VARCHAR(10) DEFAULT 'DESCONOCIDO'
);
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('ARMANDO','3105692768');
INSERT INTO EXAMPLE (NOMBRE) VALUES('ARMANDO');
ALTER TABLE EXAMPLE ALTER COLUMN TELEFONO TYPE VARCHAR(20);

*COLUMNAS CALCULADAS | POSTGRESQL #18
-CREATE TABLE PLANILLA(
IDPLANIALLA SERIAL PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(20),
SALARIO INTEGER);
SELECT * FROM PLANILLA;
ALTER TABLE PLANILLA RENAME COLUMN IDPLANIALLA TO IDPLANILLA;
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('JOSE','2000');
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('ARMANDO','3500');
UPDATE PLANILLA SET NOMBRE='JSON',SALARIO='2750' WHERE IDPLANILLA='2';
SELECT NOMBRE, SALARIO, (SALARIO +1500) AS BONO FROM PLANILLA;
UPDATE PLANILLA SET SALARIO=SALARIO+1500 WHERE IDPLANILLA='1';

*ORDENAR REGISTROS -ORDER BY | POSTGRESQL #19
-SELECT * FROM PLANILLA ORDER BY SALARIO ASC;
SELECT * FROM PLANILLA ORDER BY SALARIO DESC;
SELECT * FROM PLANILLA ORDER BY IDPLANILLA,NOMBRE;

*BUSCAR REGISTROS -LIKE | POSTGRESQL #20
-SELECT * FROM  PLANILLA WHERE NOMBRE LIKE '%JS%'; --TENER TEXTO TANTO A LA DERECHA E IZQUIERDA
SELECT * FROM PLANILLA WHERE NOMBRE LIKE 'J%'; -- A LA DERECHA TENGA TEXTO
SELECT * FROM PLANILLA WHERE NOMBRE LIKE '%O_';

*CONATR REGISTROS -COUNT | POSTGRES #21
-SELECT * FROM EXAMPLE;
SELECT COUNT(*) FROM EXAMPLE;
SELECT COUNT(NOMBRE) FROM EXAMPLE WHERE NOMBRE LIKE'%E%';

*SUMAR REGISTROS -SUM | POSTGRESQL #22
SELECT * FROM PLANILLA;
SELECT SUM(SALARIO) FROM PLANILLA;
SELECT SUM(SALARIO) FROM PLANILLA WHERE NOMBRE LIKE'%E%';

*FUNCIONES CON REGISTROS -MAX, MIN & GROUP | POSTGRESQL #23
SELECT * FROM PLANILLA;
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES('JOSE','5170');
SELECT MIN(SALARIO) FROM PLANILLA;
SELECT MAX(SALARIO) FROM PLANILLA;
SELECT * FROM PLANILLA ORDER BY NOMBRE;
SELECT NOMBRE, MAX(SALARIO) FROM PLANILLA GROUP BY NOMBRE;

*FUNCION DE PROMEDIO AVG | POSTGRESQL #24
--AVG PROMEDIO
SELECT * FROM PLANILLA;
SELECT AVG(SALARIO) FROM PLANILLA;
SELECT NOMBRE, AVG(SALARIO) FROM PLANILLA GROUP BY NOMBRE;

*FILTRADO DE GRUPOS - HAVING | POSTGRESQL #25
--CLAUSULA HAVING
SELECT * FROM PLANILLA;
SELECT NOMBRE, SALARIO FROM PLANILLA WHERE NOMBRE='JOSE' 
GROUP BY NOMBRE, SALARIO HAVING SALARIO<=3500;

*COMO VER REGISTROS DISTINTOS - DISTINCT | POSTGRESQL #26
-SELECT * FROM PLANILLA;
SELECT DISTINCT NOMBRE FROM PLANILLA;
SELECT COUNT(DISTINCT NOMBRE) FROM PLANILLA;

*VER UN RANGO DE REGISTROS -CLAUSULA BETWEEN | POSTGRESQL #27
-SELECT * FROM PLANILLA  WHERE SALARIO BETWEEN 1000 AND 5000;
SELECT * FROM PLANILLA  WHERE SALARIO NOT BETWEEN 1000 AND 5000;

*COMO RESTRINGIR LOS VALORES EN UNA TABLA? -CLAUSULA UNIQUE | POSTGRESQL #28
-ALTER TABLE EXAMPLE ADD CONSTRAINT UQ_TELEFONO
UNIQUE (TELEFONO);
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('DAVID','3502165801');
 duplicate key value violates unique constraint "uq_telefono" DETAIL: Key (telefono)=(3502165800) already exists.

*COMO ELIMINAR UNA RESTRICCIÓN? -DROP CONSTRAINT | POSTGRESQL #29
SELECT * FROM EXAMPLE;
ALTER TABLE EXAMPLE ADD CONSTRAINT UQ_TELEFONO
UNIQUE (TELEFONO);
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('DAVID','3502165800');
ALTER TABLE EXAMPLE DROP CONSTRAINT uq_telefono;

*COMO RELACIONAR 2 TABLAS CON UNA LLAVE FORÁNEA - FOREIGN KEY | POSTGRESQL #30
-CREATE TABLE EDITORIAL(
IDEDITORIAL SERIAL PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20) UNIQUE
);
CREATE TABLE LIBRO(
IDLIBRO SERIAL PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(20),
IDENTIFICACION INTEGER UNIQUE);
SELECT * FROM EDITORIAL;
SELECT * FROM LIBRO;
INSERT INTO EDITORIAL (NOMBRE) VALUES ('ARGENTINA');
INSERT INTO EDITORIAL (NOMBRE) VALUES ('COLOMBIA');
INSERT INTO EDITORIAL (NOMBRE) VALUES ('BOLIVIA');
INSERT INTO LIBRO (NOMBRE,IDENTIFICACION) VALUES('ARGENTINA',00001);
INSERT INTO LIBRO (NOMBRE,IDENTIFICACION) VALUES('COLOMBIA',00002);
INSERT INTO LIBRO (NOMBRE,IDENTIFICACION) VALUES('BOLIVIA',00003);
ALTER TABLE EDITORIAL ADD IDE_RELA INTEGER;
ALTER TABLE EDITORIAL ADD CONSTRAINT FK_IDENTIFICACION FOREIGN KEY(IDE_RELA)
REFERENCES LIBRO (IDENTIFICACION);
ALTER TABLE LIBRO ALTER COLUMN IDENTIFICACION TYPE INTEGER;
DROP TABLE LIBRO;
UPDATE EDITORIAL SET IDE_RELA='2';
INSERT INTO EDITORIAL (NOMBRE, IDE_RELA) VALUES ('VENEZUELA','4');
 insert or update on table "editorial" violates foreign key constraint "fk_identificacion" DETAIL: Key (ide_rela)=(4) is not present in table "libro".
 
*COMO CREAR UNA FUNCIÓN(STORED PROCEDURE) -FUNCTION | POSTGRES #31
-SELECT * FROM EDITORIAL;
SELECT * FROM LIBRO;
SELECT * FROM PLANILLA;
CREATE OR REPLACE FUNCTION SUMA(NUM1 INTEGER,NUM2 INTEGER) 
RETURNS INTEGER  AS 
$$
SELECT NUM1 + NUM2;
$$
LANGUAGE SQL
SELECT SUMA('51','150');
CREATE FUNCTION BUSCARSALARIO (VARCHAR) RETURNS INTEGER AS
$$
SELECT SALARIO FROM PLANILLA WHERE NOMBRE= $1;
$$
LANGUAGE SQL
SELECT BUSCARSALARIO('ARMANDO');

*FUNCION SIN PARÁMETROS Y SIN RETORNAR RESULTADO - FUNCTION | POSTGRESQL #32
-CREATE OR REPLACE FUNCTION INSERTPERSONAS() RETURNS VOID AS 
$$
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('ALBERTO',1000);
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('MARIO',2000);
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('SERGIO',3000);
$$
LANGUAGE SQL
SELECT * FROM PLANILLA;
SELECT INSERTPERSONAS();
CREATE OR REPLACE FUNCTION BUSCARINFO(INTEGER) RETURNS PLANILLA AS
$$
SELECT * FROM PLANILLA WHERE IDPLANILLA=$1;
$$
LANGUAGE SQL
SELECT BUSCARINFO(3);

*COMO HACER TOP # EN POSTGRESQL? -LIMIT | POSTGRESQL #33
-SELECT * FROM PLANILLA LIMIT 5;

*COMO HACER UN "DISPARADOR" Y SUN FUNCIÓN -TRIGGER | POSTGRESQL #34
-SELECT * FROM PLANILLA;
create tabLE LOG_PLANILLA(
IDPLANILLA SERIAL PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	SALARIO INTEGER
);
SELECT * FROM LOG_PLANILLA;
CREATE OR REPLACE FUNCTION SP_TEST() RETURNS TRIGGER
AS 
$$
BEGIN
INSERT INTO LOG_PLANILLA VALUES(
	OLD.IDPLANILLA,
	OLD.NOMBRE,
	OLD.SALARIO);
	RETURN NEW;
END
$$
LANGUAGE PLPGSQL;
CREATE TRIGGER TR_UPDATE BEFORE UPDATE ON PLANILLA 
FOR EACH ROW 
EXECUTE PROCEDURE SP_TRIGGERS();
UPDATE PLANILLA SET NOMBRE='JSON',SALARIO='2000' WHERE NOMBRE='JSON';
SELECT * FROM LOG_PLANILLA;

*COMO USAR LA CLAUSULA AFTER PARA EL INSERT - TRIGGER | POSTGRESQL #35
SELECT * FROM PLANILLA;
SELECT * FROM LOG_PLANILLA;
TRUNCATE LOG_PLANILLA;
ALTER TABLE LOG_PLANILLA ADD COLUMN USUARIO VARCHAR(20);
ALTER TABLE LOG_PLANILLA ADD COLUMN FECHA DATE;
ALTER TABLE LOG_PLANILLA ADD COLUMN  TIEMPO TIME;

CREATE OR REPLACE FUNCTION SP_TR_INSERT() RETURNS TRIGGER
AS
$$
DECLARE
USUARIO VARCHAR(20) := User;
FECHA DATE :=current_date;
TIEMPO TIME :=current_Time;
BEGIN
INSERT INTO LOG_PLANILLA VALUES(NEW.IDPLANILLA,NEW.NOMBRE,NEW.SALARIO,USUARIO,FECHA,TIEMPO);
RETURN NEW;
END
$$
LANGUAGE PLPGSQL;
CREATE TRIGGER TR_INSERT AFTER INSERT ON PLANILLA
FOR EACH ROW
EXECUTE PROCEDURE SP_TR_INSERT();
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES('KARINA','10000');
SELECT * FROM LOG_PLANILLA;
SELECT * FROM PLANILLA;

*COMO USAR LA CLAUSULA IN | POSTGRES #36
SELECT * FROM PLANILLA WHERE IDPLANILLA='2' OR IDPLANILLA='9' OR IDPLANILLA='1';
SELECT * FROM PLANILLA WHERE IDPLANILLA IN ('2','3','5');

*COMO USAR LAS CLAUSULAS LIMIT Y OFFSET | POSTGRESQL #37
SELECT * FROM PLANILLA LIMIT 3 OFFSET 6;

* COMO CREAR UNA VISTA -VIEW | POSTGRESQL #38
SELECT * FROM PLANILLA LIMIT 3 OFFSET 6;
CREATE OR REPLACE VIEW VIEW_PLANILLA AS (
	SELECT 
	NOMBRE, SALARIO FROM PLANILLA
);
SELECT * FROM VIEW_PLANILLA;

*COMO HACER UNA CCONSULTA DE 2 O MÁS TABLAS -UNION | POSTGRESQL #39
-SELECT * FROM PLANILLA;
SELECT * FROM EXAMPLE;
CREATE OR REPLACE VIEW VIEW_UNION
AS
SELECT NOMBRE, SALARIO, 'PLANILLA' AS ORIGIN FROM PLANILLA
UNION ALL
SELECT NOMBRE, IDEXAMPLE, 'EXAMPLE'FROM EXAMPLE;
select * FROM VIEW_UNION;

*COMO COMBINAR DOS O MAS TABLAS - INNER JOIN | POSTGRESQL #40
-SELECT * FROM PLANILLA;
SELECT * FROM EXAMPLE;
SELECT * FROM PLANILLA as PL
INNER JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;

*COMBINACIÓN EXTERNA IZQUIERDA - LEFT JOIN | POSTGRESQL #41
SELECT * FROM PLANILLA as PL
LEFT JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;
SELECT * FROM PLANILLA as PL
LEFT JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;

*COMBINACIÓN EXTERNA DERECHA - RIGHT JOIN | POSTGRESQL #42
SELECT * FROM PLANILLA as PL
RIGHT OUTER JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;S

*COMO VER COMBINACIONES DE AMBOS LADOS -FULL JOIN | POSTGRESQL #43
-SELECT * FROM PLANILLA as PL
FULL OUTER JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;

*COMO VER TODAS LAS COMBINACIONES POSIBLES -CROSS JOIN | POSTGRESQL #44
-SELECT * FROM PLANILLA as PL
FULL OUTER JOIN EXAMPLE E
ON PL.IDPLANILLA=E.IDEXAMPLE;

*RESUMEN DE LOS JOIN | POSTGRESQL #45

*COMO USAR LA SENTENCIA WITH CHECK OPTION EN LAS VISTAS | POSTGRESQL #46
-SELECT * FROM EXAMPLE;
ALTER TABLE EXAMPLE ADD COLUMN PAIS VARCHAR(30);
ALTER TABLE EXAMPLE ADD COLUMN APELLIDO VARCHAR(30);
ALTER TABLE EXAMPLE ADD COLUMN IDENTIFICACION INTEGER;
CREATE OR REPLACE VIEW VIEW_EXAMPLE AS
SELECT  * FROM EXAMPLE WHERE NOMBRE='JOSE'
with cHECK OPTION;
SELECT * FROM VIEW_EXAMPLE;
INSERT INTO VIEW_EXAMPLE VALUES(15,'KARINA','322232','VENEZUELA','SON','12751160');
ERROR: new row violates check option for view "view_example" DETAIL: Failing row contains (15, KARINA, 322232, VENEZUELA, SON, 12751160). SQL state: 44000

*COMO USAR LAS FUNCIONES MATEMÁTICAS ABS,CBRT, CEILING Y FLOR | POSTGRESQL #47
---ABS VALOR ABSOLUTO | CBRT RAIZ CUBICA | CEILING REDONDEAR UN NÚMERO | FLOOR REDONDEAR HACIA ABAJO
SELECT ABS(-30);
SELECT CBRT(27);
SELECT CEILING(15.33);
SELECT FLOOR(16.58);

*FUNCIONES MATEMÁTICAS POWER, ROUND, SIGN Y SQRT | POSTGRESQL #48
---POWER(X,Y) POTENCIA | ROUND(N,D) REDONDEAR A DECIMALES | SIGN(X) | SQRT(X) RAÍZ CUADRADA
SELECT POWER(2,4);
SELECT ROUND(2.34557,4);
SELECT SIGN(0); --0
SELECT SIGN(23); --1
SELECT SIGN(-23); -- -1
SELECT SQRT(124);

*FUNCIONES MATEMÁTICAS MOD, PI RANDOM, TRUNC | POSTGRESQL #49
----MOD(X,Y) MÓDULO | PI | RANDOM | TRUNC(X) O TRUNC(X,Y)
SELECT MOD(33,2);
SELECT PI();
SELECT RANDOM(); --NÚMERO ALEATORIO
SELECT TRUNC(-4.35);--PARTE ENTERA DEL NÚMERO
SELECT TRUNC(4,2);

*FUNCIONES PARA MANEJAR CARACTERES -CHAR_LENGTH, UPPER, LOWER Y POSITION | POSTGRESQL #50
-SELECT CHAR_LENGTH('Hola Mundo'); --TAMAÑO DEL TEXTO;
SELECT UPPER('jose armando'); --MAYUSCULA;
SELECT LOWER('JOSE ARMANDO'); --MINUSCULA;
SELECT POSITION('Hola' in 'Hola Mundo'); --DEVUELVE LA POSICIÓN DE LA PALABRA

*FUNCIONES PARA MANEJAR CARACTERES -SUBSTRING Y TRIM | POSTGRESQL #51
-SELECT SUBSTRING('Hello World' FROM 2 FOR 6); -- TOMA SECCIÓN DEL TEXTO
SELECT TRIM('   JSON     '); --ELIMINAR CARACTERES DESDE EL PRINCIPIO O FIN
SELECT TRIM(LEADING '-' FROM '--JSON--'); --ELIMINA GUIÓN AL PRINCIPIO DE CARACTERES
SELECT TRIM(TRAILING '-' FROM '--JSON--'); --ELIMINA GUIÓN AL FINAL DE CARACTERES
SELECT TRIM(BOTH '-' FROM '--JSON--'); --ELIMINA GUIÓN AL PRINCIPIO Y AL FINAL DE CARACTERES

*COMO MANEJAR CARACTERES COM LTRIM,RTRIM, SUBSTR, LDAP Y RPAD | POSTGRESQL #52
-SELECT LTRIM('   ---HOLA MUNDO','-');  ---QUITAR CARACTERES
SELECT RTRIM('HOLA MUNDO----','-'); ---QUITAR CARACTERES
SELECT SUBSTR('HOLA MUNDO____',5); ---DEVUELVE EL TEXTO
SELECT LPAD('HOLA MUNDO',15,'-');
SELECT RPAD('HOLA MUNDO',15,'-');

*FUNCIONES PARA FECHAS Y TIEMPO -DATE, TIME, TIMESTAMP Y EXTRACT() | POSTGRESQL #53
-SELECT CURRENT_DATE; --FECHA ACTUAL
SELECT CURRENT_TIME; --HORA ACTUAL Y ZONA HORARIA
SELECT CURRENT_TIMESTAMP; --FECHA, HORA ACTUAL Y ZONA HORARIA
SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP)
SELECT EXTRACT(MONTH FROM CURRENT_TIMESTAMP)
SELECT EXTRACT(DAY FROM CURRENT_TIMESTAMP)
SELECT EXTRACT(HOUR FROM CURRENT_TIMESTAMP)
SELECT EXTRACT(CENTURY FROM CURRENT_TIMESTAMP)
SELECT EXTRACT(QUARTER FROM CURRENT_TIMESTAMP)

*OPERADORES PARA CONTROLAR LOS VALORES NULL | POSTGRESQL #54
-SELECT * FROM EXAMPLE WHERE PAIS IS NOT NULL;
SELECT * FROM EXAMPLE WHERE PAIS IS  NULL;

*COMO CREAR UNA SECUENCIA -CREATE, ALTER Y DROP | POSTGRESQL #55
---ALTER
CREATE SEQUENCE SEC_INDICE
START WITH 1 
INCREMENT BY 1
MINVALUE 1
MAXVALUE 1000 CYCLE; -- NO CYCLE
SELECT * FROM  SEC_INDICE;
SELECT NEXTVAL('SEC_INDICE');
DROP SEQUENCE SEC_INDICE;

*COMO CREAR UNA SUBCONSULTA | POSTGRESQL #56
-SELECT * FROM EXAMPLE;
SELECT * FROM PLANILLA;
SELECT NOMBRE,TELEFONO PAIS,IDENTIFICACION,
(select MAX(NOMBRE) AS USUARIOS FROM PLANILLA WHERE  NOMBRE=NOMBRE) 
FROM EXAMPLE;
SELECT * FROM PLANILLA WHERE NOMBRE = 'SERGIO';

*CREAR UNA SUBCONSULTA COMO EXPRESIÓN EN  UN WHERE | POSTGRESQL #57
-SELECT * FROM EXAMPLE;
SELECT * FROM PLANILLA;
SELECT NOMBRE,TELEFONO PAIS,IDENTIFICACION FROM EXAMPLE 
WHERE NOMBRE=(SELECT NOMBRE FROM PLANILLA LIMIT 1);
SELECT * FROM PLANILLA WHERE NOMBRE = 'SERGIO';

*SUBCONSULTA CON WHERE IN | POSTGRESQL #58
-SELECT NOMBRE,TELEFONO PAIS,IDENTIFICACION FROM EXAMPLE 
WHERE NOMBRE IN (SELECT NOMBRE FROM PLANILLA WHERE NOMBRE LIKE '%A%');

*COMO HACER UN DELETE O UPDATE CON SUBCONSULTAS | POSTGRESQL #59
-SELECT * FROM EXAMPLE;
ALTER TABLE EXAMPLE ADD COLUMN VISA VARCHAR(250);
UPDATE EXAMPLE SET PAIS=(SELECT PAIS FROM PLANILLA ORDER BY PAIS LIMIT 1 OFFSET 5)
WHERE PAIS IS NULL;
SELECT * FROM PLANILLA ORDER BY IDPLANILLA ASC;
ALTER TABLE PLANILLA ADD COLUMN APELLIDO VARCHAR(25);
UPDATE PLANILLA SET PAIS='SON ROJAS' WHERE IDPLANILLA='1';
UPDATE EXAMPLE SET PAIS=(SELECT )

*COMO HACER UN INSERT CON UNA SUBCONSULTA | POSTGRESQL #60
-SELECT * FROM PLANILLA;
CREATE TABLE PLANILLAPRECIOSMAX2 (
	PAIS VARCHAR(20),
	PRECIOMAX INTEGER
);
SELECT * FROM PLANILLAPRECIOSMAX2;
INSERT INTO PLANILLAPRECIOSMAX2 
SELECT PAIS, MAX(SALARIO) FROM PLANILLA
WHERE PAIS = PAIS GROUP BY PAIS

