*INSTALACIÓN Y SOLUCIÓN DE PROBLEMAS | POSTGRESQL #1

*COMO CREAR UNA BASE DE DATOS | POSTGRESQL #2
-CREATE DATABASE TEST
-CREATE DATABASE developer
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;
	
*ELIMINAR BASE DE DATOS | POSTGRESQL #3
-DROP DATABASE IF EXISTS "example"

*COMO CREAR UNA TABLBA | POSTGRESQL #4
-CREATE TABLE PERSONA(
IDPERSONA INTEGER NOT NULL,
	NOMBRE VARCHAR(30),
	CEDULA VARCHAR(10)
);
SELECT * FROM PERSONA;

*COMO INSERTAR DATOS EN UNA TABLA - INSERT | POSTGRESQL #5
-INSERT INTO PERSONA VALUES('1','JOSE','1077851273');
-INSERT INTO PERSONA (idpersona,nombre) VALUES('1','ARMANDO');

*ACTUALIZAR REGISTROS -UPDATE | POSTGRESQL #6
-UPDATE PERSONA SET idpersona='2' where cedula is null;
-update persona set cedula='1075222431' where cedula is null;
-UPDATE PERSONA SET idpersona='1', nombre='DANIEL' where cedula='1077851273';

*TIPOS DE DATOS | POSTGRESQL #7
--BOOLEAN = TRUE OR FALSE
--CHARACTER(n) = CADENA DE CARACTERES DE TAMAÑO FIJO
--DATE = FECHA SIN HORA
--FLOAT = FLOTANTE NÚMERO
--INTEGER OR INT = NÚMERO ENTERO
--DECIMAL = NÚMEROS EXACTO
--TIME = TIEMPO EN HORAS, MINUTOS, SEGUNDOS
--VARCHAR(n) = CADENA DE CARACTERES DE TAMAÑO VARIABLE

*CONSULTAS DE DATOS -SELECT | POSTGRESQL #8
-SELECT * FROM PERSONA;
-SELECT NOMBRE,CEDULA FROM PERSONA;
-SELECT (NOMBRE,CEDULA) DATOS FROM PERSONA;
-SELECT NOMBRE AS NOMBRE, CEDULA AS IDENTIFICACION FROM PERSONA;
-SELECT NOMBRE FROM PERSONA WHERE idpersona='1';

*WHERE Y OPERADORES DE COMPARACIÓN | POSTGRESQL #9
-SELECT * FROM PERSONA WHERE NOMBRE = 'DANIEL';
-SELECT * FROM PERSONA WHERE NOMBRE != 'DANIEL';
-SELECT * FROM PERSONA WHERE IDPERSONA <= '2';
-SELECT * FROM PERSONA WHERE IDPERSONA = '1' and nombre='JOSE'; 

* COMO ELIMINAR DATOS DE UNA TABLA -DELETE | POSTGRESQL #10
-DELETE FROM PERSONA WHERE NOMBRE='DANIEL';

*COMENTAR UNA O MÁS LÍNEAS EN SQL | POSTGRESQL #11
--SELECT * FROM PERSONA
/*
CREATE TABLE TEST(
IDTEST INTEGER NO NULL,
	NOMBRE VARCHAR(20),
	TELEFONO VARCHAR(10)
)*/

*MODIFICAR UNA TABLA -ALTER | POSTGRESQL #12
-ALTER TABLE PERSONA ADD COLUMN APELLIDOS VARCHAR(20);
-ALTER TABLE PERSONA RENAME COLUMN APELLIDOS TO TEST;
-ALTER TABLE PERSONA DROP COLUMN TEST;

*MODIFICAR UNA COLUMNA -ALTER COLUMN | POSTGRESQL #13
-ALTER TABLE PERSONA DROP COLUMN TEST;
-ALTER TABLE PERSONA ALTER COLUMN APELLIDOS DROP NOT NULL;
-ALTER TABLE PERSONA ALTER COLUMN APELLIDOS TYPE VARCHAR(50);

*CLAVE PRIMARIA -PRIMARY KEY | POSTGRESQL #14
CREATE TABLE TEST(
IDPERSONA INTEGER NOT NULL PRIMARY KEY,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(10)
);
CREATE TABLE DATOS(
IDPERSONA INTEGER NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(10), 
	PRIMARY KEY(IDPERSONA)
);
-ALTER TABLE PERSONA ADD PRIMARY KEY (IDPERSONA);
-insert INTO PERSONA VALUES ('1','ARMANDO','8811160','SON');

*AUTO INCREMENTAR -SERIAL | POSTGRESQL #15
-CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL  PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(20)
);
SELECT * FROM EXAMPLE;
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('ARMANDO','3105692768');

*DROP Y TRUNCATE | POSTGRESQL #16 
-DROP BORRAR TABLAS TRUNCATE ERASE TABLE 
-SELECT * FROM EXAMPLE;
DELETE FROM EXAMPLE;
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,IDENTIFICACION) VALUES('ARMANDO','3105692768');
DROP TABLE EXAMPLE;
--TRUNCATE --ELIMINA LA TABLA Y VUELVE Y LA CREA
TRUNCATE TABLE EXAMPLE RESTART IDENTITY; --INICIAR LA TABLA DESDE IDEXAMPLE
CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL  PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	IDENTIFICACION VARCHAR(20)
);

*VALORES POR DEFAULT EN UNA TABLA | POSTGRESQL #17
---AGREGAR VALORES POR DEFAULT EN UN CAMPO

SELECT * FROM EXAMPLE;
DROP TABLE EXAMPLE;
CREATE TABLE EXAMPLE(
IDEXAMPLE SERIAL PRIMARY KEY NOT NULL,
	NOMBRE VARCHAR(20),
	TELEFONO VARCHAR(10) DEFAULT 'DESCONOCIDO'
);
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('JOSE','3502165800');
INSERT INTO EXAMPLE (NOMBRE,TELEFONO) VALUES('ARMANDO','3105692768');
INSERT INTO EXAMPLE (NOMBRE) VALUES('ARMANDO');
ALTER TABLE EXAMPLE ALTER COLUMN TELEFONO TYPE VARCHAR(20);

*COLUMNAS CALCULADAS | POSTGRESQL #18
-CREATE TABLE PLANILLA(
IDPLANIALLA SERIAL PRIMARY KEY NOT NULL,
NOMBRE VARCHAR(20),
SALARIO INTEGER);
SELECT * FROM PLANILLA;
ALTER TABLE PLANILLA RENAME COLUMN IDPLANIALLA TO IDPLANILLA;
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('JOSE','2000');
INSERT INTO PLANILLA (NOMBRE,SALARIO) VALUES ('ARMANDO','3500');
UPDATE PLANILLA SET NOMBRE='JSON',SALARIO='2750' WHERE IDPLANILLA='2';
SELECT NOMBRE, SALARIO, (SALARIO +1500) AS BONO FROM PLANILLA;
UPDATE PLANILLA SET SALARIO=SALARIO+1500 WHERE IDPLANILLA='1';

*ORDENAR REGISTROS -ORDER BY | POSTGRESQL #19
-SELECT * FROM PLANILLA ORDER BY SALARIO ASC;
SELECT * FROM PLANILLA ORDER BY SALARIO DESC;
SELECT * FROM PLANILLA ORDER BY IDPLANILLA,NOMBRE;

*BUSCAR REGISTROS -LIKE | POSTGRESQL #20
-SELECT * FROM  PLANILLA WHERE NOMBRE LIKE '%JS%'; --TENER TEXTO TANTO A LA DERECHA E IZQUIERDA
SELECT * FROM PLANILLA WHERE NOMBRE LIKE 'J%'; -- A LA DERECHA TENGA TEXTO
SELECT * FROM PLANILLA WHERE NOMBRE LIKE '%O_';

*CONATR REGISTROS -COUNT | POSTGRES #21
-
